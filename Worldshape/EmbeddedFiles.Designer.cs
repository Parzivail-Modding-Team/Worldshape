//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Worldshape {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class EmbeddedFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal EmbeddedFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Worldshape.EmbeddedFiles", typeof(EmbeddedFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///out vec4 FragColor;
        ///  
        ///in vec2 TexCoords;
        ///
        ///uniform sampler2DMS screenColor;
        ///uniform sampler2DMS screenUi;
        ///uniform int width;
        ///uniform int height;
        ///uniform int samples;
        ///uniform int samplesUi;
        ///
        ///vec4 mtexture(sampler2DMS s, vec2 coords, int samp)
        ///{
        ///	ivec2 vpCoords = ivec2(width, height);
        ///	vpCoords.x = int(vpCoords.x * coords.x);
        ///	vpCoords.y = int(vpCoords.y * coords.y);
        ///
        ///	vec4 avg = vec4(0);
        ///	for (int i = 0; i &lt; samp; i++)
        ///	{
        ///		avg += texelFetch(s, vpCoords, i);
        ///	}
        ///	retur [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fs_screen {
            get {
                return ResourceManager.GetString("fs_screen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///uniform vec3 lightPos;
        ///uniform vec3 tint;
        ///uniform int samples;
        ///uniform sampler2D random;
        ///
        ///in vec3 fragPos;
        ///in vec4 fragColor;
        ///in vec3 fragNormal;
        ///
        ///out vec4 color;
        ///
        ///void main()
        ///{
        ///	vec2 resolution = vec2(512., 512.);
        ///
        ///    vec3 norm = normalize(fragNormal);
        ///    vec3 lightDir = normalize(lightPos - fragPos);  
        ///    float diffuse = max(dot(norm, lightDir), 0.0);
        ///    float ambient = 0.3;
        ///	
        ///    // Look up noise from texture
        ///    vec4 noise = texture(random, gl_FragCoord.xy / [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string fs_terrain {
            get {
                return ResourceManager.GetString("fs_terrain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap random {
            get {
                object obj = ResourceManager.GetObject("random", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///layout (location = 0) in vec2 aPos;
        ///layout (location = 1) in vec2 aTexCoords;
        ///
        ///out vec2 TexCoords;
        ///
        ///void main()
        ///{
        ///    gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0); 
        ///    TexCoords = aTexCoords;
        ///}  .
        /// </summary>
        internal static string vs_screen {
            get {
                return ResourceManager.GetString("vs_screen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 330 core
        ///
        ///// Input vertex data, different for all executions of this shader.
        ///layout(location = 0) in vec3 position;
        ///layout(location = 1) in vec3 normal;
        ///layout(location = 2) in vec4 color;
        ///
        ///out vec3 fragPos;
        ///out vec4 fragColor;
        ///out vec3 fragNormal;
        ///
        ///uniform mat4 m;
        ///uniform mat4 v;
        ///uniform mat4 p;
        ///  
        ///void main()
        ///{
        ///	fragColor = color / 255.;
        ///	fragNormal = normalize(normal);
        ///
        ///	mat4 MVP = p*m*v;
        ///	gl_Position =  MVP * vec4(position, 1.);
        ///	fragPos = vec3(v * vec4(position, 1.0));
        ///}.
        /// </summary>
        internal static string vs_terrain {
            get {
                return ResourceManager.GetString("vs_terrain", resourceCulture);
            }
        }
    }
}
